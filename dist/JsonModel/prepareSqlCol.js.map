{"version":3,"sources":["../../src/JsonModel/prepareSqlCol.js"],"names":["byPathLength","a","b","parts","length","byPathLengthDesc","stringifyJson","JSON","stringify","stringifyJsonObject","obj","json","parseJson","v","parse","parseJsonObject","arrayToJson","prepareSqlCol","col","type","undefined","alwaysObject","TypeError","name","falsyBool","where","_","sql","whereVal","real","quoted","quoteId","jsonCol","jsonPath","isAnyOfArray","isArray","in","textSearch","eachSql","inAll","s","String","select","alias","includes","Error"],"mappings":"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","sourcesContent":["import {sql} from '../DB'\n\nexport const byPathLength = (a, b) => a.parts.length - b.parts.length\nexport const byPathLengthDesc = (a, b) => b.parts.length - a.parts.length\n\nconst stringifyJson = JSON.stringify\nexport const stringifyJsonObject = obj => {\n\tconst json = JSON.stringify(obj)\n\treturn json === '{}' ? null : json\n}\n\nexport const parseJson = v => (v == null ? v : JSON.parse(v))\nconst parseJsonObject = v => (v == null ? {} : JSON.parse(v))\n\nconst arrayToJson = v => (v && v.length ? [JSON.stringify(v)] : false)\n\n// Note: avoid where functions; that way, queries can be reused for different args\n// eslint-disable-next-line complexity\nexport const prepareSqlCol = col => {\n\tif (col.type === 'JSON') {\n\t\tif (col.stringify === undefined)\n\t\t\tcol.stringify = col.alwaysObject ? stringifyJsonObject : stringifyJson\n\t\tif (col.parse === undefined)\n\t\t\tcol.parse = col.alwaysObject ? parseJsonObject : parseJson\n\t} else if (col.alwaysObject)\n\t\tthrow new TypeError(`${name}: .alwaysObject only applies to JSON type`)\n\tif (col.falsyBool && !col.where) {\n\t\tcol.where = (_, v) => (v ? `${col.sql} IS NOT NULL` : `${col.sql} IS NULL`)\n\t\tcol.whereVal = () => []\n\t}\n\tif (!col.sql) {\n\t\tcol.sql = col.real\n\t\t\t? `tbl.${col.quoted}`\n\t\t\t: `json_extract(tbl.${sql.quoteId(col.jsonCol)},'$.${col.jsonPath}')`\n\t}\n\tif (col.isAnyOfArray) {\n\t\tcol.isArray = true\n\t\tcol.in = true\n\t}\n\tif (col.isArray) {\n\t\tif (col.where || col.whereVal)\n\t\t\tthrow new TypeError(`${name}: cannot mix isArray and where/whereVal`)\n\t\tif (col.textSearch)\n\t\t\tthrow new TypeError(`${name}: Only one of isArray/textSearch allowed`)\n\t\tconst eachSql = `json_each(${\n\t\t\tcol.real\n\t\t\t\t? `tbl.${col.quoted}`\n\t\t\t\t: `tbl.${sql.quoteId(col.jsonCol)},'$.${col.jsonPath}'`\n\t\t})`\n\t\tif (col.in) {\n\t\t\tcol.where = `EXISTS(SELECT 1 FROM ${eachSql} j WHERE j.value IN (SELECT value FROM json_each(?)))`\n\t\t\tcol.whereVal = arrayToJson\n\t\t} else if (col.inAll) {\n\t\t\tcol.where = `NOT EXISTS(SELECT 1 FROM json_each(?) j WHERE j.value NOT IN (SELECT value FROM ${eachSql}))`\n\t\t\tcol.whereVal = arrayToJson\n\t\t} else {\n\t\t\tcol.where = `? IN (SELECT value FROM ${eachSql})`\n\t\t}\n\t} else if (col.in) {\n\t\tif (col.where || col.whereVal)\n\t\t\tthrow new TypeError(`${name}: cannot mix .in and where/whereVal`)\n\t\tif (col.textSearch)\n\t\t\tthrow new TypeError(`${name}: Only one of in/textSearch allowed`)\n\t\tcol.where = `${col.sql} IN (SELECT value FROM json_each(?))`\n\t\tcol.whereVal = arrayToJson\n\t} else if (col.textSearch) {\n\t\tif (col.where || col.whereVal)\n\t\t\tthrow new TypeError(`${name}: cannot mix textSearch and where/whereVal`)\n\t\tif (col.in)\n\t\t\tthrow new TypeError(`${name}: Only one of in/textSearch allowed`)\n\t\tcol.where = `${col.sql} LIKE ?`\n\t\tcol.whereVal = v => {\n\t\t\tif (v == null) return\n\t\t\tconst s = String(v)\n\t\t\tif (s) return [`%${s}%`]\n\t\t}\n\t}\n\tcol.select = `${col.sql} AS ${col.alias}`\n\tif (\n\t\ttypeof col.where === 'string' &&\n\t\t!col.whereVal &&\n\t\t!col.where.includes('?')\n\t)\n\t\tthrow new Error(\n\t\t\t`${col.name}: .where \"${col.where}\" should include a ? when not passing .whereVal`\n\t\t)\n\tif (!col.where) col.where = `${col.sql}=?`\n}\n"],"file":"prepareSqlCol.js"}