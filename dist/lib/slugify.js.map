{"version":3,"sources":["../../src/lib/slugify.js"],"names":["abc","randomString","n","Array","apply","map","charAt","Math","floor","random","length","join","slugifyString","name","alwaysResult","t","toString","Object","values","find","v","Error","encodeURIComponent","trim","replace","toLowerCase","slice","uniqueSlugId","model","colName","currentId","slug","id","i","where","idColQ","exists"],"mappings":";;;;;;;;;;;AAEA,MAAMA,GAAG,GAAG,sCAAZ;;AACO,MAAMC,YAAY,GAAGC,CAAC,IAC5BC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkB,IAAID,KAAJ,CAAUD,CAAV,CAAlB,EAAgC;AAAhC,CACEG,GADF,CACM,MAAM;AACV,SAAOL,GAAG,CAACM,MAAJ,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,GAAG,CAACU,MAA/B,CAAX,CAAP;AACA,CAHF,EAIEC,IAJF,CAIO,EAJP,CADM;;;;AAOA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,YAAP,KAAwB;AACpD;AACA,QAAMC,CAAC,GACN,OAAOF,IAAP,KAAgB,QAAhB,GACGA,IADH,GAEG,OAAOA,IAAP,KAAgB,QAAhB,GACAA,IAAI,CAACG,QAAL,EADA,GAEAH,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,GACAI,MAAM,CAACC,MAAP,CAAcL,IAAd,EAAoBM,IAApB,CAAyBC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAvD,CADA,GAEA,IAPJ;;AAQA,MAAI,CAACL,CAAL,EAAQ;AACP,QAAID,YAAJ,EAAkB,OAAOb,YAAY,CAAC,EAAD,CAAnB;AAClB,UAAM,IAAIoB,KAAJ,CAAW,kBAAiBR,IAAK,EAAjC,CAAN;AACA;;AACD,SAAOS,kBAAkB,CAAC,sBAAOP,CAAP,EAAUQ,IAAV,EAAD,CAAlB,CACLC,OADK,CACG,gBADH,EACqB,GADrB,EAELA,OAFK,CAEG,MAFH,EAEW,GAFX,EAGLC,WAHK,GAILD,OAJK,CAIG,4BAJH,EAIiC,EAJjC,EAKLE,KALK,CAKC,CALD,EAKI,EALJ,CAAP;AAMA,CApBM,C,CAsBP;;;;;AACO,MAAMC,YAAY,GAAG,OAAOC,KAAP,EAAcf,IAAd,EAAoBgB,OAApB,EAA6BC,SAA7B,KAA2C;AACtE,QAAMC,IAAI,GAAGnB,aAAa,CAACC,IAAD,EAAO,IAAP,CAA1B;AACA,MAAImB,EAAE,GAAGD,IAAT;AACA,MAAIE,CAAC,GAAG,CAAR;AACA,QAAMC,KAAK,GAAGJ,SAAS,IAAI;AAC1B,KAAE,GAAEF,KAAK,CAACO,MAAO,WAAjB,GAA8B,CAACL,SAAD,CADJ,CAG3B;;AAH2B,GAA3B;;AAIA,SAAO,MAAMF,KAAK,CAACQ,MAAN,CAAa;AAAC,KAACP,OAAD,GAAWG;AAAZ,GAAb,EAA8B;AAACE,IAAAA;AAAD,GAA9B,CAAb,EAAqD;AACpDF,IAAAA,EAAE,GAAI,GAAED,IAAK,IAAG,EAAEE,CAAE,EAApB;AACA;;AACD,SAAOD,EAAP;AACA,CAZM","sourcesContent":["import {deburr} from 'lodash'\n\nconst abc = 'abcdefghijklmnopqrstuvwxyz0123456789'\nexport const randomString = n =>\n\tArray.apply(null, new Array(n)) // eslint-disable-line prefer-spread\n\t\t.map(() => {\n\t\t\treturn abc.charAt(Math.floor(Math.random() * abc.length))\n\t\t})\n\t\t.join('')\n\nexport const slugifyString = (name, alwaysResult) => {\n\t// extract name from i18n objects\n\tconst t =\n\t\ttypeof name === 'string'\n\t\t\t? name\n\t\t\t: typeof name === 'number'\n\t\t\t? name.toString()\n\t\t\t: name && typeof name === 'object'\n\t\t\t? Object.values(name).find(v => typeof v === 'string' && v)\n\t\t\t: null\n\tif (!t) {\n\t\tif (alwaysResult) return randomString(12)\n\t\tthrow new Error(`Cannot slugify ${name}`)\n\t}\n\treturn encodeURIComponent(deburr(t).trim())\n\t\t.replace(/(%..|[()'_~])/g, '-')\n\t\t.replace(/--+/g, '-')\n\t\t.toLowerCase()\n\t\t.replace(/(^[^a-z0-9]+|[^a-z0-9]+$)/g, '')\n\t\t.slice(0, 30)\n}\n\n// This is not race-safe - only use for write-seldomn things like backoffice or inside transactions\nexport const uniqueSlugId = async (model, name, colName, currentId) => {\n\tconst slug = slugifyString(name, true)\n\tlet id = slug\n\tlet i = 1\n\tconst where = currentId && {\n\t\t[`${model.idColQ} IS NOT ?`]: [currentId],\n\t}\n\t// eslint-disable-next-line no-await-in-loop\n\twhile (await model.exists({[colName]: id}, {where})) {\n\t\tid = `${slug}-${++i}`\n\t}\n\treturn id\n}\n"],"file":"slugify.js"}