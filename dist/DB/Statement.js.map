{"version":3,"sources":["../../src/DB/Statement.js"],"names":["dbg","id","Statement","constructor","db","sql","name","Promise","resolve","_stmt","_call","_sql","_sqlite","statements","isStatement","_wrap","fn","P","then","_refresh","finalize","reject","err","run","vars","get","finally","reset","all","each","args","onRow","Error","_","row"],"mappings":"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","sourcesContent":["// @ts-check\n// Implements prepared statements that auto-close and recreate\n// Only a single preparation per sql string\n// No parameter binding at creation for now\n// Somewhat based on node-sqlite3 by Kriasoft, LLC\n\nimport debug from 'debug'\nconst dbg = debug('strato-db/DB:stmt')\n\nlet id = 0\nclass Statement {\n\tconstructor(db, sql, name) {\n\t\tdb.statements[sql] = this\n\t\tthis._sql = sql\n\t\tthis.db = db\n\t\tthis.name = `${db.name}{${id++}${name ? ` ${name}` : ''}}}`\n\t}\n\n\tget isStatement() {\n\t\treturn true\n\t}\n\n\tget sql() {\n\t\treturn this._sql\n\t}\n\n\tP = Promise.resolve()\n\n\t/**\n\t * @callback voidFn\n\t * @returns {Promise<*>|*}\n\t */\n\t/**\n\t * wrap the function with a refresh call\n\t * @param {voidFn} fn the function to wrap\n\t * @returns {Promise<*>} the result of the function\n\t */\n\t_wrap(fn) {\n\t\tif (!this._stmt) this.P = this.P.then(this._refresh)\n\t\tthis.P = this.P.then(fn, fn)\n\t\treturn this.P\n\t}\n\n\t_refresh = async () => {\n\t\tif (this._stmt) return\n\t\tthis._stmt = await this.db._call(\n\t\t\t'prepare',\n\t\t\t[this._sql],\n\t\t\tthis.db._sqlite,\n\t\t\tthis.name,\n\t\t\tfalse,\n\t\t\ttrue\n\t\t)\n\n\t\tthis.db.statements[this._sql] = this\n\t}\n\n\tfinalize() {\n\t\tdelete this.db.statements[this._sql]\n\t\tconst {_stmt} = this\n\t\tif (!_stmt) return Promise.resolve()\n\t\treturn this._wrap(\n\t\t\t() =>\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tdelete this._stmt\n\t\t\t\t\t_stmt.finalize(err => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (!this._stmt) this._stmt = _stmt\n\t\t\t\t\t\t\treturn reject(err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdbg(`${this.name} finalized`)\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t)\n\t}\n\n\t/**\n\t * Run the statement and return the metadata\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<object>} - an object with `lastID` and `changes`\n\t */\n\tasync run(vars) {\n\t\treturn this._wrap(() => this.db._call('run', vars, this, this.name, true))\n\t}\n\n\t/**\n\t * Return the first row for the statement result\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<(object|null)>} - the result or falsy if missing\n\t */\n\tasync get(vars) {\n\t\treturn this._wrap(() =>\n\t\t\tthis.db._call('get', vars, this, this.name).finally(\n\t\t\t\t() =>\n\t\t\t\t\tthis._stmt &&\n\t\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\t\tthis._stmt.reset(() => {\n\t\t\t\t\t\t\tresolve(this)\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t)\n\t\t)\n\t}\n\n\t/**\n\t * Return all result rows for the statement\n\t * @param {Array<*>} [vars] - the variables to be bound to the statement\n\t * @returns {Promise<Array<object>>} - the results\n\t */\n\tasync all(vars) {\n\t\treturn this._wrap(() => this.db._call('all', vars, this, this.name))\n\t}\n\n\tasync each(args, onRow) {\n\t\tif (typeof onRow !== 'function')\n\t\t\tthrow new Error(`signature is .each(args Array, cb Function)`)\n\t\t// err is always null, no reason to have it\n\t\treturn this._wrap(() =>\n\t\t\tthis.db._call('each', [args, (_, row) => onRow(row)], this, this.name)\n\t\t)\n\t}\n}\n\nexport default Statement\n"],"file":"Statement.js"}