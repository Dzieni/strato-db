{"version":3,"sources":["../../src/EventSourcingDB/EventSourcingDB.js"],"names":["dbg","wait","ms","Promise","r","setTimeout","registerHistoryMigration","rwDb","queue","registerMigrations","up","db","oldTable","all","length","some","c","name","allDone","resolve","each","row","then","set","json","undefined","JSON","parse","console","error","file","errorToString","msg","stack","message","String","Error","replace","EventSourcingDB","EventEmitter","constructor","models","queueFile","withViews","onWillOpen","prevOWO","dbOptions","lastV","errorCount","enabled","_minVersion","MAX_RETRY","close","event","getNext","getVersion","_isPolling","resultEvent","withTransaction","v","nowV","run","result","_handleEvent","failedResult","_resultQueue","catch","__BE_QUIET","_SQLite","path","walkEvents","ev","p","type","events","i","sub","_triggerEventListeners","_reallyStop","process","env","NODE_ENV","setMaxListeners","Object","keys","TypeError","DB","open","readOnly","qDb","EventQueue","columns","qDbFile","userVersion","uv","hasMetadata","get","vObj","Number","count","exec","store","rwStore","_reducerNames","_deriverModels","_preprocModels","_readWriters","reducers","migrationOptions","dispatch","bind","modelDef","entries","reducer","preprocessor","deriver","Model","ESModel","RWModel","rest","prev","model","helpers","TYPE","args","e","hasOne","rwModel","addModel","emitter","setWritable","push","stopPolling","checkForEvents","qV","latestVersion","startPolling","wantVersion","module","hot","dispose","_waitingP","_waitForEvent","exit","cancelNext","data","ts","add","handledVersion","_subDispatch","_getVersionP","finally","waitForQueue","reject","_waitingFor","_maxWaitingFor","o","promise","vStr","listenerCount","emit","_preprocessor","isMainEvent","newEvent","_reducer","freeze","map","key","out","Array","isArray","n","origEvent","depth","_handle","repeat","_applyEvent","subEvent","doneEvent","readWriters","phase","applyResult"],"mappings":"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","sourcesContent":["// Event Sourcing DataBase\n// * Only allows changes via messages that are stored and processed. This allows easy\n//   replication, debugging and possibly even rollback\n// * All the database tables participating should only be changed via events\n// * The current version is stored in the SQLite `user_version` pragma and corresponds to the last event applied\n// * Events describe facts that happened\n//   * Think of them as newspaper clippings (that changed) or notes passed to the kitchen (this change requested)\n//   * Should not require outside-db data to know how to handle them. Otherwise, split them in parts\n// * Models store the data in a table an define preprocessor, reducer, applyEvent and deriver\n// * Events:\n//   * have version `v`, strictly ordered\n//   * are added to `history` table in a single transaction, and then processed asynchronously in a separate transaction\n//   * result of processing is stored in `history`\n// * Each event is handled separately and serially in a single transaction:\n//   * Preprocessors canonicalize the event\n//   * Reducers get the table at `v-1` and the event, and describe the change for version `v` into a result object\n//   * Once all reducers ran, the result objects are passed to model.applyEvent that changes the db\n//   * Then the derivers run, they can post-process the db for calculating or caching\n//     * Another option is a writable table with lazy user-space calculation. Delete entries in the deriver when they become invalid\n//   * Then the transaction completes and the db is at version `v`\n//   * Only applyEvent and deriver get a writeable db\n// * Sub-events can be emitted at any point during processing\n//   * for example USER_REGISTERED results in USER_ADD and EMAIL_OUT\n//   * they are processed exactly like events but in the transaction of the parent event, in-process\n//   * sub-events are stored in the event in a `sub` array, for reporting and debugging\n// * To make changes to a table, change the reducer and rebuild the DB with the history, or migrate the table\n//\n// Extra notes:\n// * preprocessors should always process events statelessly - processing again should be no problem\n// * preprocessors, reducers, derivers should be pure, only working with the database state.\n// * To incorporate external state in event processing, split the event up in multiple events recording current state, and listen to the db to know what to do\n\n// * Ideally, reducers etc never fail\n// * When they fail, the whole app hangs for new events\n// * therefore all failures are exceptional and need intervention like app restart for db issues\n// * => warn immediately with error when it happens\n// * => make changing event easy, e.g. call queue.set from graphql or delete it by changing it to type 'HANDLE_FAILED' and rename .error\n\nimport debug from 'debug'\nimport {isEmpty} from 'lodash'\nimport DB from '../DB'\nimport ESModel from './ESModel'\nimport EventQueue from '../EventQueue'\nimport EventEmitter from 'events'\nimport {settleAll} from '../lib/settleAll'\n\nconst dbg = debug('strato-db/ESDB')\n\nconst wait = ms => new Promise(r => setTimeout(r, ms))\n\nconst registerHistoryMigration = (rwDb, queue) => {\n\trwDb.registerMigrations('historyExport', {\n\t\t2018040800: {\n\t\t\tup: async db => {\n\t\t\t\tconst oldTable = await db.all('PRAGMA table_info(history)')\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\toldTable.length === 4 &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'json') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'v') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'type') &&\n\t\t\t\t\t\toldTable.some(c => c.name === 'ts')\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn\n\t\t\t\tlet allDone = Promise.resolve()\n\t\t\t\tawait db.each('SELECT * from history', row => {\n\t\t\t\t\tallDone = allDone.then(() =>\n\t\t\t\t\t\tqueue.set({...row, json: undefined, ...JSON.parse(row.json)})\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t\tawait allDone\n\t\t\t\t// not dropping table, you can do that yourself :)\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(`!!! history table in ${rwDb.file} is no longer needed`)\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst errorToString = error => {\n\tconst msg = error\n\t\t? error.stack || error.message || String(error)\n\t\t: new Error('missing error').stack\n\treturn String(msg).replace(/\\s+/g, ' ')\n}\n\n/**\n * EventSourcingDB maintains a DB where all data is\n * atomically updated based on {@link Event events (free-form messages)}.\n * This is very similar to how Redux works in React.\n * @extends EventEmitter\n */\nclass EventSourcingDB extends EventEmitter {\n\tMAX_RETRY = 38 // this is an hour\n\n\t// eslint-disable-next-line complexity\n\tconstructor({\n\t\tqueue,\n\t\tmodels,\n\t\tqueueFile,\n\t\twithViews = true,\n\t\tonWillOpen: prevOWO,\n\t\t...dbOptions\n\t}) {\n\t\tsuper()\n\t\t// Prevent node warning about more than 11 listeners\n\t\t// Each model has 2 instances that might listen\n\t\tthis.setMaxListeners(Object.keys(models).length * 2 + 20)\n\t\tif (dbOptions.db)\n\t\t\tthrow new TypeError(\n\t\t\t\t'db is no longer an option, pass the db options instead, e.g. file, verbose, readOnly'\n\t\t\t)\n\t\tif (!models) throw new TypeError('models are required')\n\t\tif (queueFile && queue)\n\t\t\tthrow new TypeError('Either pass queue or queueFile')\n\n\t\tthis.rwDb = new DB({\n\t\t\t...dbOptions,\n\t\t\tonWillOpen: async () => {\n\t\t\t\tawait this.queue.db.open()\n\t\t\t\tif (prevOWO) await prevOWO()\n\t\t\t},\n\t\t})\n\t\tconst {readOnly} = this.rwDb\n\n\t\t// The RO DB needs to be the same for :memory: or it won't see anything\n\t\tthis.db =\n\t\t\tthis.rwDb.file === ':memory:' || readOnly\n\t\t\t\t? this.rwDb\n\t\t\t\t: new DB({\n\t\t\t\t\t\t...dbOptions,\n\t\t\t\t\t\tname: dbOptions.name && `RO-${dbOptions.name}`,\n\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\tonWillOpen: async () => {\n\t\t\t\t\t\t\t// Make sure migrations happened before opening\n\t\t\t\t\t\t\tawait this.rwDb.open()\n\t\t\t\t\t\t},\n\t\t\t\t  })\n\n\t\tif (queue) {\n\t\t\tthis.queue = queue\n\t\t} else {\n\t\t\tconst qDb = new DB({\n\t\t\t\t...dbOptions,\n\t\t\t\tname: `${dbOptions.name || ''}Queue`,\n\t\t\t\tfile: queueFile || this.rwDb.file,\n\t\t\t})\n\t\t\tthis.queue = new EventQueue({\n\t\t\t\tdb: qDb,\n\t\t\t\twithViews,\n\t\t\t\tcolumns: {events: {type: 'JSON'}},\n\t\t\t})\n\t\t}\n\t\tconst qDbFile = this.queue.db.file\n\t\t// If queue is in same file as rwDb, share the connection\n\t\t// for writing results during transaction - no deadlocks\n\t\tthis._resultQueue =\n\t\t\tthis.rwDb.file === qDbFile && qDbFile !== ':memory:'\n\t\t\t\t? new EventQueue({db: this.rwDb})\n\t\t\t\t: this.queue\n\n\t\t// Move old history data to queue DB\n\t\tif (this.rwDb.file !== qDbFile) {\n\t\t\tregisterHistoryMigration(this.rwDb, this.queue)\n\t\t}\n\t\tthis.rwDb.registerMigrations('ESDB', {\n\t\t\t// Move v2 metadata version to DB user_version\n\t\t\tuserVersion: async db => {\n\t\t\t\tconst uv = await db.userVersion()\n\t\t\t\tif (uv) return // Somehow we already have a version\n\t\t\t\tconst hasMetadata = await db.get(\n\t\t\t\t\t'SELECT 1 FROM sqlite_master WHERE name=\"metadata\"'\n\t\t\t\t)\n\t\t\t\tif (!hasMetadata) return\n\t\t\t\tconst vObj = await db.get(\n\t\t\t\t\t'SELECT json_extract(json, \"$.v\") AS v FROM metadata WHERE id=\"version\"'\n\t\t\t\t)\n\t\t\t\tconst v = vObj && Number(vObj.v)\n\t\t\t\tif (!v) return\n\t\t\t\tawait db.userVersion(v)\n\t\t\t\tconst {count} = await db.get(`SELECT count(*) AS count from metadata`)\n\t\t\t\tif (count === 1) {\n\t\t\t\t\tawait db\n\t\t\t\t\t\t.exec(\n\t\t\t\t\t\t\t`DROP TABLE metadata; DELETE FROM _migrations WHERE runKey=\"0 metadata\"`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t/* shrug */\n\t\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tawait db.run(`DELETE FROM metadata WHERE id=\"version\"`)\n\t\t\t\t}\n\t\t\t},\n\t\t})\n\n\t\tthis.store = {}\n\t\tthis.rwStore = {}\n\n\t\tthis._reducerNames = []\n\t\tthis._deriverModels = []\n\t\tthis._preprocModels = []\n\t\tthis._readWriters = []\n\t\tconst reducers = {}\n\t\tconst migrationOptions = {queue: this.queue}\n\n\t\tconst dispatch = this.dispatch.bind(this)\n\t\tfor (const [name, modelDef] of Object.entries(models)) {\n\t\t\ttry {\n\t\t\t\tif (!modelDef) throw new Error('model missing')\n\t\t\t\tlet {\n\t\t\t\t\treducer,\n\t\t\t\t\tpreprocessor,\n\t\t\t\t\tderiver,\n\t\t\t\t\tModel = ESModel,\n\t\t\t\t\tRWModel = Model,\n\t\t\t\t\t...rest\n\t\t\t\t} = modelDef\n\n\t\t\t\tif (RWModel === ESModel) {\n\t\t\t\t\tif (reducer) {\n\t\t\t\t\t\tconst prev = reducer\n\t\t\t\t\t\treducer = async (model, event, helpers) => {\n\t\t\t\t\t\t\tconst result = await prev(model, event, helpers)\n\t\t\t\t\t\t\tif (!result && event.type === model.TYPE)\n\t\t\t\t\t\t\t\treturn ESModel.reducer(model, event)\n\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (preprocessor) {\n\t\t\t\t\t\tconst prev = preprocessor\n\t\t\t\t\t\tpreprocessor = async args => {\n\t\t\t\t\t\t\tconst e = await ESModel.preprocessor(args)\n\t\t\t\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\t\t\t\tif (e) args.event = e\n\t\t\t\t\t\t\treturn prev(args)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet hasOne = false\n\n\t\t\t\tconst rwModel = this.rwDb.addModel(RWModel, {\n\t\t\t\t\tname,\n\t\t\t\t\t...rest,\n\t\t\t\t\tmigrationOptions,\n\t\t\t\t\tdispatch,\n\t\t\t\t\temitter: this,\n\t\t\t\t})\n\t\t\t\trwModel.deriver = deriver || RWModel.deriver\n\t\t\t\tthis.rwStore[name] = rwModel\n\t\t\t\tif (typeof rwModel.setWritable === 'function')\n\t\t\t\t\tthis._readWriters.push(rwModel)\n\t\t\t\tif (rwModel.deriver) {\n\t\t\t\t\tthis._deriverModels.push(rwModel)\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\n\t\t\t\tlet model\n\t\t\t\tif (this.db === this.rwDb) {\n\t\t\t\t\tmodel = rwModel\n\t\t\t\t} else {\n\t\t\t\t\tmodel = this.db.addModel(Model, {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\t...rest,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\temitter: this,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tmodel.preprocessor = preprocessor || Model.preprocessor\n\t\t\t\tmodel.reducer = reducer || Model.reducer\n\t\t\t\tthis.store[name] = model\n\t\t\t\tif (model.preprocessor) {\n\t\t\t\t\tthis._preprocModels.push(model)\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\t\t\t\tif (model.reducer) {\n\t\t\t\t\tthis._reducerNames.push(name)\n\t\t\t\t\treducers[name] = model.reducer\n\t\t\t\t\thasOne = true\n\t\t\t\t}\n\n\t\t\t\tif (!hasOne)\n\t\t\t\t\tthrow new TypeError(\n\t\t\t\t\t\t`${this.name}: At least one reducer, deriver or preprocessor required`\n\t\t\t\t\t)\n\t\t\t} catch (error) {\n\t\t\t\tif (error.message)\n\t\t\t\t\terror.message = `ESDB: while configuring model ${name}: ${error.message}`\n\t\t\t\tif (error.stack)\n\t\t\t\t\terror.stack = `ESDB: while configuring model ${name}: ${error.stack}`\n\t\t\t\tthrow error\n\t\t\t}\n\t\t}\n\t}\n\n\tasync close() {\n\t\tawait this.stopPolling()\n\t\treturn Promise.all([\n\t\t\tthis.rwDb && this.rwDb.close(),\n\t\t\tthis.db !== this.rwDb && this.db.close(),\n\t\t\tthis.queue.db.close(),\n\t\t])\n\t}\n\n\tasync checkForEvents() {\n\t\tconst [v, qV] = await Promise.all([\n\t\t\tthis.getVersion(),\n\t\t\tthis.queue.latestVersion(),\n\t\t])\n\t\tif (v < qV) return this.startPolling(qV)\n\t}\n\n\t_waitingP = null\n\n\t_minVersion = 0\n\n\tstartPolling(wantVersion) {\n\t\tif (wantVersion) {\n\t\t\tif (wantVersion > this._minVersion) this._minVersion = wantVersion\n\t\t} else if (!this._isPolling) {\n\t\t\tthis._isPolling = true\n\t\t\tif (module.hot) {\n\t\t\t\tmodule.hot.dispose(() => {\n\t\t\t\t\tthis.stopPolling()\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tif (!this._waitingP) {\n\t\t\tthis._waitingP = this._waitForEvent()\n\t\t\t\t.catch(error => {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'!!! Error waiting for event! This should not happen! Please investigate!',\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t\t// Crash program but leave some time to notify\n\t\t\t\t\tif (process.env.NODE_ENV !== 'test')\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-process-exit\n\t\t\t\t\t\tsetTimeout(() => process.exit(100), 500)\n\n\t\t\t\t\tthrow new Error(error)\n\t\t\t\t})\n\t\t\t\t.then(lastV => {\n\t\t\t\t\tthis._waitingP = null\n\t\t\t\t\t// Subtle race condition: new wantVersion coming in between end of _wait and .then\n\t\t\t\t\t// lastV is falsy when forcing a stop\n\t\t\t\t\tif (lastV != null && this._minVersion && lastV < this._minVersion)\n\t\t\t\t\t\treturn this.startPolling(this._minVersion)\n\t\t\t\t\tthis._minVersion = 0\n\t\t\t\t\treturn undefined\n\t\t\t\t})\n\t\t}\n\t\treturn this._waitingP\n\t}\n\n\tstopPolling() {\n\t\tthis._isPolling = false\n\t\tthis._reallyStop = true\n\t\tthis.queue.cancelNext()\n\t\treturn this._waitingP || Promise.resolve()\n\t}\n\n\tasync dispatch(type, data, ts) {\n\t\tconst event = await this.queue.add(type, data, ts)\n\t\treturn this.handledVersion(event.v)\n\t}\n\n\t_subDispatch(event, type, data) {\n\t\tif (!event.events) event.events = []\n\t\tevent.events.push({type, data})\n\t\tdbg(`${event.type}.${type} queued`)\n\t}\n\n\t_getVersionP = null\n\n\tgetVersion() {\n\t\tif (!this._getVersionP) {\n\t\t\tthis._getVersionP = this.db.userVersion().finally(() => {\n\t\t\t\tthis._getVersionP = null\n\t\t\t})\n\t\t}\n\t\treturn this._getVersionP\n\t}\n\n\tasync waitForQueue() {\n\t\t// give migrations a chance to queue things\n\t\tawait this.rwDb.open()\n\t\tconst v = await this.queue.latestVersion()\n\t\treturn this.handledVersion(v)\n\t}\n\n\t_waitingFor = {}\n\n\t_maxWaitingFor = 0\n\n\tasync handledVersion(v) {\n\t\tif (!v) return\n\t\t// We must get the version first because our history might contain future events\n\t\tif (v <= (await this.getVersion())) {\n\t\t\tconst event = await this.queue.get(v)\n\t\t\tif (event.error) {\n\t\t\t\t// This can only happen if we skipped a failed event\n\t\t\t\treturn Promise.reject(event)\n\t\t\t}\n\t\t\treturn event\n\t\t}\n\t\tif (!this._waitingFor[v]) {\n\t\t\tif (v > this._maxWaitingFor) this._maxWaitingFor = v\n\t\t\tconst o = {}\n\t\t\tthis._waitingFor[v] = o\n\t\t\to.promise = new Promise((resolve, reject) => {\n\t\t\t\to.resolve = resolve\n\t\t\t\to.reject = reject\n\t\t\t})\n\t\t\tthis.startPolling(v)\n\t\t}\n\t\treturn this._waitingFor[v].promise\n\t}\n\n\t_triggerEventListeners(event) {\n\t\tconst o = this._waitingFor[event.v]\n\t\tif (o) delete this._waitingFor[event.v]\n\n\t\tif (event.v >= this._maxWaitingFor) {\n\t\t\t// Normally this will be empty but we might encounter a race condition\n\t\t\tfor (const vStr of Object.keys(this._waitingFor)) {\n\t\t\t\tconst v = Number(vStr)\n\t\t\t\tif (v > event.v) continue\n\t\t\t\t// Note: if the DB fails for get(), the trigger won't run and it will retry later\n\t\t\t\t// eslint-disable-next-line promise/catch-or-return\n\t\t\t\tthis.queue.get(v).then(event => this._triggerEventListeners(event))\n\t\t\t}\n\t\t}\n\n\t\t// Note that error events don't increase the DB version\n\t\tif (event.error) {\n\t\t\t// emit 'error' throws if there is no listener\n\t\t\tif (this.listenerCount('error')) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.emit('error', event)\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error('!!! \"error\" event handler threw, ignoring', error)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (o && process.env.NODE_ENV === 'test') {\n\t\t\t\tif (!this.__BE_QUIET)\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`!!! rejecting the dispatch for event ${event.v} ${event.type} - this does NOT happen outside test mode, NEVER rely on this.\n\t\t\t\t\t\tSet eSDB.__BE_QUIET to not show this message`\n\t\t\t\t\t)\n\t\t\t\to.reject(event)\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tthis.emit('result', event)\n\t\t\t} catch (error) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error('!!! \"result\" event handler threw, ignoring', error)\n\t\t\t}\n\t\t\tif (o) o.resolve(event)\n\t\t}\n\t}\n\n\t// This is the loop that applies events from the queue. Use startPolling(false) to always poll\n\t// so that events from other processes are also handled\n\t// It would be nice to not have to poll, but sqlite triggers only work on\n\t// the connection that makes the change\n\t// This should never throw, handling errors can be done in apply\n\t_waitForEvent = async () => {\n\t\t/* eslint-disable no-await-in-loop */\n\t\tconst {rwDb} = this\n\t\tlet lastV = 0\n\t\tlet errorCount = 0\n\t\tif (dbg.enabled && this._minVersion)\n\t\t\tdbg(`waiting for events until minVersion: ${this._minVersion}`)\n\t\twhile (!this._minVersion || this._minVersion > lastV) {\n\t\t\tif (errorCount) {\n\t\t\t\tif (errorCount > this.MAX_RETRY)\n\t\t\t\t\tthrow new Error(`Giving up on processing event ${lastV + 1}`)\n\t\t\t\t// These will reopen automatically\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.db.file !== ':memory:' && this.db.close(),\n\t\t\t\t\tthis.rwDb.file !== ':memory:' && this.rwDb.close(),\n\t\t\t\t\tthis.queue.db.file !== ':memory:' && this.queue.db.close(),\n\t\t\t\t])\n\t\t\t\tawait wait(5000 * errorCount)\n\t\t\t}\n\t\t\tlet event\n\t\t\ttry {\n\t\t\t\tevent = await this.queue.getNext(\n\t\t\t\t\tawait this.getVersion(),\n\t\t\t\t\t!(this._isPolling || this._minVersion)\n\t\t\t\t)\n\t\t\t} catch (error) {\n\t\t\t\terrorCount++\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(\n\t\t\t\t\t`!!! ESDB: queue.getNext failed - this should not happen`,\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif (!event) return lastV\n\n\t\t\tconst resultEvent = await rwDb\n\t\t\t\t.withTransaction(async () => {\n\t\t\t\t\tlastV = event.v\n\n\t\t\t\t\t// It could be that it was processed elsewhere due to racing\n\t\t\t\t\tconst nowV = await this.getVersion()\n\t\t\t\t\tif (event.v <= nowV) return\n\n\t\t\t\t\tawait rwDb.run('SAVEPOINT handle')\n\t\t\t\t\tconst result = await this._handleEvent(event)\n\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\t// Undo all changes, but retain the event info\n\t\t\t\t\t\tawait rwDb.run('ROLLBACK TO SAVEPOINT handle')\n\t\t\t\t\t\tif (result.result) {\n\t\t\t\t\t\t\tresult.failedResult = result.result\n\t\t\t\t\t\t\tdelete result.result\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait rwDb.run('RELEASE SAVEPOINT handle')\n\t\t\t\t\t}\n\t\t\t\t\treturn this._resultQueue.set(result)\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tif (!this.__BE_QUIET)\n\t\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'!!! ESDB: an error occured outside of the normal error handlers',\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t)\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...event,\n\t\t\t\t\t\terror: {_SQLite: errorToString(error)},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tif (!resultEvent) continue // Another process handled the event\n\n\t\t\tif (resultEvent.error) {\n\t\t\t\terrorCount++\n\t\t\t\tif (!this.__BE_QUIET) {\n\t\t\t\t\tlet path, error\n\t\t\t\t\t// find the deepest error\n\t\t\t\t\tconst walkEvents = (ev, p = ev.type) => {\n\t\t\t\t\t\tif (ev.events) {\n\t\t\t\t\t\t\tlet i = 0\n\t\t\t\t\t\t\tfor (const sub of ev.events)\n\t\t\t\t\t\t\t\tif (walkEvents(sub, `${p}.${i++}:${sub.type}`)) return true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ev.error) {\n\t\t\t\t\t\t\tpath = p\n\t\t\t\t\t\t\terror = ev.error\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\twalkEvents(resultEvent)\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`!!! ESDB: event ${path} processing failed (try #${errorCount})`,\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\tlastV = resultEvent.v - 1\n\t\t\t} else errorCount = 0\n\n\t\t\tthis._triggerEventListeners(resultEvent)\n\n\t\t\tif (this._reallyStop || (errorCount && process.env.NODE_ENV === 'test')) {\n\t\t\t\tthis._reallyStop = false\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\treturn lastV\n\t\t/* eslint-enable no-await-in-loop */\n\t}\n\n\tasync _preprocessor(event, isMainEvent) {\n\t\tfor (const model of this._preprocModels) {\n\t\t\tconst {name} = model\n\t\t\tconst {v, type} = event\n\t\t\tlet newEvent\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tnewEvent = await model.preprocessor({\n\t\t\t\t\tevent,\n\t\t\t\t\tmodel: isMainEvent ? model : this.rwStore[name],\n\t\t\t\t\t// subevents must see intermediate state\n\t\t\t\t\tstore: isMainEvent ? this.store : this.rwStore,\n\t\t\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\t\t\tisMainEvent,\n\t\t\t\t})\n\t\t\t} catch (error) {\n\t\t\t\tnewEvent = {error}\n\t\t\t}\n\t\t\t// mutation allowed\n\t\t\tif (!newEvent) newEvent = event\n\t\t\tif (!newEvent.error) {\n\t\t\t\t// Just in case event was mutated\n\t\t\t\tif (newEvent.v !== v)\n\t\t\t\t\tnewEvent.error = new Error(`preprocessor must retain event version`)\n\t\t\t\telse if (!newEvent.type)\n\t\t\t\t\tnewEvent.error = new Error(`preprocessor must retain event type`)\n\t\t\t}\n\t\t\tif (newEvent.error) {\n\t\t\t\treturn {\n\t\t\t\t\t...event,\n\t\t\t\t\tv,\n\t\t\t\t\ttype,\n\t\t\t\t\terror: {\n\t\t\t\t\t\t[`_preprocess_${name}`]: errorToString(newEvent.error),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t\t// allow other preprocessors to alter the event\n\t\t\tevent = newEvent\n\t\t}\n\t\treturn event\n\t}\n\n\tasync _reducer(event, isMainEvent) {\n\t\tconst result = {}\n\t\tconst events = event.events || []\n\t\tconst helpers = {\n\t\t\t// subevents must see intermediate state\n\t\t\tstore: isMainEvent ? this.store : this.rwStore,\n\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\tevent,\n\t\t\tisMainEvent,\n\t\t}\n\t\tif (process.env.NODE_ENV !== 'production') {\n\t\t\tObject.freeze(event.data)\n\t\t}\n\t\tawait Promise.all(\n\t\t\tthis._reducerNames.map(async key => {\n\t\t\t\tconst model = this.store[key]\n\t\t\t\tlet out\n\t\t\t\ttry {\n\t\t\t\t\tout = await model.reducer(\n\t\t\t\t\t\tisMainEvent ? model : this.rwStore[key],\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\thelpers\n\t\t\t\t\t)\n\t\t\t\t} catch (error) {\n\t\t\t\t\tout = {\n\t\t\t\t\t\terror: errorToString(error),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// in <v3 we allowed returning the model to indicate no change\n\t\t\t\tif (!out || out === model) return\n\t\t\t\tif (out.events) {\n\t\t\t\t\tif (!Array.isArray(out.events)) {\n\t\t\t\t\t\tresult[key] = {error: `.events is not an array`}\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tevents.push(...out.events)\n\t\t\t\t\tdelete out.events\n\t\t\t\t} else if ('events' in out) {\n\t\t\t\t\t// allow falsy events\n\t\t\t\t\tdelete out.events\n\t\t\t\t}\n\t\t\t\tresult[key] = out\n\t\t\t})\n\t\t)\n\n\t\tif (this._reducerNames.some(n => result[n] && result[n].error)) {\n\t\t\tconst error = {}\n\t\t\tfor (const name of this._reducerNames) {\n\t\t\t\tconst r = result[name]\n\t\t\t\tif (r && r.error) {\n\t\t\t\t\terror[`_reduce_${name}`] = r.error\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {...event, error}\n\t\t}\n\n\t\tconst resultEvent = {\n\t\t\t...event,\n\t\t\tresult,\n\t\t}\n\t\tif (events.length) resultEvent.events = events\n\t\treturn resultEvent\n\t}\n\n\tasync _handleEvent(origEvent, depth = 0) {\n\t\tconst isMainEvent = depth === 0\n\t\tlet event\n\t\tif (depth > 100) {\n\t\t\treturn {\n\t\t\t\t...origEvent,\n\t\t\t\terror: {\n\t\t\t\t\t_handle: `.${origEvent.type}: events recursing too deep`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tdbg(`handling ${'>'.repeat(depth)}${origEvent.type}`)\n\t\tevent = {\n\t\t\t...origEvent,\n\t\t\tresult: undefined,\n\t\t\tevents: undefined,\n\t\t\terror: undefined,\n\t\t}\n\n\t\tevent = await this._preprocessor(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\tevent = await this._reducer(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\tevent = await this._applyEvent(event, isMainEvent)\n\t\tif (event.error) return event\n\n\t\t// handle sub-events in order\n\t\tif (event.events) {\n\t\t\tfor (let i = 0; i < event.events.length; i++) {\n\t\t\t\tconst subEvent = event.events[i]\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst doneEvent = await this._handleEvent(\n\t\t\t\t\t{...subEvent, v: event.v},\n\t\t\t\t\tdepth + 1\n\t\t\t\t)\n\t\t\t\tdelete doneEvent.v\n\t\t\t\tevent.events[i] = doneEvent\n\t\t\t\tconst {error} = doneEvent\n\t\t\t\tif (error) {\n\t\t\t\t\tif (depth && error._handle)\n\t\t\t\t\t\t// pass the error upwards but leave on bottom-most\n\t\t\t\t\t\tdelete doneEvent.error\n\t\t\t\t\tevent.error = {\n\t\t\t\t\t\t_handle: `.${subEvent.type}${\n\t\t\t\t\t\t\terror._handle ? error._handle : ` failed`\n\t\t\t\t\t\t}`,\n\t\t\t\t\t}\n\t\t\t\t\treturn event\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event\n\t}\n\n\tasync _applyEvent(event, isMainEvent) {\n\t\tconst {rwStore, rwDb, _readWriters: readWriters} = this\n\t\tlet phase = '???'\n\t\ttry {\n\t\t\tfor (const model of readWriters) model.setWritable(true)\n\t\t\tconst {result} = event\n\n\t\t\tif (result && !isEmpty(result)) {\n\t\t\t\tphase = 'apply'\n\t\t\t\t// Apply reducer results, wait for all to settle\n\t\t\t\tawait settleAll(\n\t\t\t\t\tObject.entries(result),\n\t\t\t\t\tasync ([name, r]) => r && rwStore[name].applyResult(r)\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (isMainEvent) {\n\t\t\t\tphase = 'version'\n\t\t\t\tawait rwDb.userVersion(event.v)\n\t\t\t}\n\n\t\t\t// Apply derivers\n\t\t\tif (!event.error && this._deriverModels.length) {\n\t\t\t\tphase = 'derive'\n\t\t\t\tawait settleAll(this._deriverModels, async model =>\n\t\t\t\t\tmodel.deriver({\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t// derivers can write anywhere (carefully)\n\t\t\t\t\t\tstore: this.rwStore,\n\t\t\t\t\t\tevent,\n\t\t\t\t\t\tresult: result[model.name],\n\t\t\t\t\t\tdispatch: this._subDispatch.bind(this, event),\n\t\t\t\t\t\tisMainEvent,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (event.result) {\n\t\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\t\tevent.failedResult = event.result\n\t\t\t\tdelete event.result\n\t\t\t}\n\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\tif (!event.error) event.error = {}\n\t\t\t// eslint-disable-next-line require-atomic-updates\n\t\t\tevent.error[`_apply_${phase}`] = errorToString(error)\n\t\t} finally {\n\t\t\tfor (const model of readWriters) model.setWritable(false)\n\t\t}\n\n\t\treturn event\n\t}\n}\n\nexport default EventSourcingDB\n"],"file":"EventSourcingDB.js"}